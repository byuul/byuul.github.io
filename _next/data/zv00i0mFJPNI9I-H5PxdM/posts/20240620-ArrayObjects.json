{"pageProps":{"postData":{"id":"20240620-ArrayObjects","contentHtml":"<h2>배열, 오브젝트, 내장된 메서드와 루프들의 성능은 얼마나 좋은가?</h2>\n<h3>객체의 빅오</h3>\n<pre><code>let instructor = {\n    firstName: \"Kelly\",\n    isInstructor: true,\n    favoriteNumbers: [1, 2, 3, 4],\n};\n</code></pre>\n<h4>오브젝트를 언제 쓰는가?</h4>\n<ul>\n<li>정렬되어 있을 필요가 없을 때</li>\n<li>빠른 접근, 입력과 제거를 원할 때</li>\n</ul>\n<h4>오브젝트의 빅 오(Big O)</h4>\n<p>Insertion - O(1)</p>\n<p>Removal - O(1)</p>\n<p>Searching - O(N)</p>\n<p>Access - O(1)</p>\n<p>--</p>\n<h4>오브젝트 메서드의 빅 오(Big O)</h4>\n<p>Object.keys - O(N)</p>\n<p>Object.values - O(N)</p>\n<p>Object.entries - O(N)</p>\n<p>hasOwnProperty - O(1)</p>\n<p>keys,values,entries 메서드들은 O(N) 선형 시간으로 아이템 갯수가 늘어남에따라 각 아이템에 접근해서 배열에 결과 값을 추가해야한다.</p>\n<p>--</p>\n<h3>배열의 빅오</h3>\n<pre><code>let names = [\"Michael\", \"Melissa\", \"Andrea\"];\nlet values = [true, {}, [], 2, \"awesome\"];\n</code></pre>\n<h4>배열을 언제 쓰는가?</h4>\n<ul>\n<li>정렬된 데이터가 필요할 때</li>\n</ul>\n<h4>배열의 빅 오(Big O)</h4>\n<p>Insertion - 어디에 입력을 하는지에 따라..</p>\n<p>Removal - 어디에 입력을 하는지에 따라..</p>\n<p>Searching - O(N)</p>\n<p>Access - O(1)</p>\n<p>--</p>\n<h4>배열 메서드의 빅 오(Big O)</h4>\n<p>push - O(1)</p>\n<p>pop - O(1)</p>\n<p>shfit - O(N)</p>\n<p>unshift - O(N)</p>\n<p>concat - O(N)</p>\n<p>slice - O(N)</p>\n<p>splice - O(N)</p>\n<p>sort - O(N*logN)</p>\n<p>forEach/map/filter/reduce/etc... - - O(N)</p>\n","title":"배열과 오브젝트의 성능 평가","date":"2024-06-20","thumbnail":"https://github.com/byuul/leetcode/assets/149779257/28611718-85cb-4688-af12-d973024eeac7","description":"Big O Notation"}},"__N_SSG":true}